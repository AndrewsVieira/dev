import { Client } from 'soap/lib/client';
import * as _security from 'soap/lib/security';
import { Server, ServerType } from 'soap/lib/server';
import { IOptions, IServerOptions, IServices } from 'soap/lib/types';
export declare const security: typeof _security;
export { Client } from 'soap/lib/client';
export { HttpClient } from 'soap/lib/http';
export { BasicAuthSecurity, BearerSecurity, ClientSSLSecurity, ClientSSLSecurityPFX, NTLMSecurity, WSSecurity, WSSecurityCert } from 'soap/lib/security';
export { Server } from 'soap/lib/server';
export { passwordDigest } from 'soap/lib/utils';
export * from 'soap/lib/types';
export { WSDL } from 'soap/lib/wsdl';
export declare type CreateClientCallback = (err: any, client: Client) => void;
export declare function createClient(url: string, callback: CreateClientCallback, endpoint?: string): void;
export declare function createClient(url: string, options: IOptions, callback: CreateClientCallback, endpoint?: string): void;
export declare function createClientAsync(url: string, options?: IOptions, endpoint?: string): Promise<Client>;
export declare function listen(server: ServerType, path: string, services: IServices, wsdl: string, callback?: (err: any, res: any) => void): Server;
export declare function listen(server: ServerType, options: IServerOptions): Server;
